var util = require('util');
var EventEmitter = require('events').EventEmitter;

function CreateClient(database){
	var mysql = require('mysql');
	var client = mysql.createClient({
		host:'127.0.0.1',
		user: 'test',
		password: 'optimus',
		database:database
	});
	return client;
}
function CamulCase(str){
	var result = '';
	for (var i=0; i < str.split('_').length; i++) {
		var c = str.split('_')[i];
		result += c[0].toUpperCase() + c.substr(1).toLowerCase()
	};
	return result;
}
var dbConfig = require('../schema/dbConfig').config,
db = dbConfig.database;

exports.find = function(tableName,conditions){
	var client = CreateClient(db);
	sql = 'select * from ' + tableName + ' where ' + conditions;
};
var sqladapter=require('../sqladapter/sqladapter');
exports.initDbClasses = function(){
	var client = CreateClient('information_schema');
	var sql = 'SELECT table_name FROM information_schema.tables where table_schema="'+db+'"';
	var resultStr = [];
	client.query(sql,function(err, results, fields){
		for (var i=0; i < results.length; i++) {
			var klassName = CamulCase(results[i].table_name);
			resultStr[i] =  'global.' + klassName + ' = function(){',temp = null;
			sql = 'select * from information_schema.columns where table_schema="'+db+'" and table_name="'+results[i].table_name+'"'
			client.query(sql,function(_err,_results,_fields){
				for (var j=0; j < _results.length; j++) {
					resultStr[this] += 'this.' + _results[j].COLUMN_NAME + '=null;';
				};
				resultStr[this] += 'EventEmitter.call(this);}';
				eval(resultStr[this]);
				
				var klassName = CamulCase(results[this].table_name);
				var klass = eval(klassName);
				klass['tableName'] = results[this].table_name;
				// try{
				// 	reqire('models/'+klassName+'.js');
				// }catch(e){
				// 	
				// }
				util.inherits(klass, EventEmitter);
				// klass.emiter.setMaxListeners(20000);
				for(var s in EventEmitter.prototype){
					klass[s] = EventEmitter.prototype[s];
				}
				klass.columns = [];
				for (var j=0; j < _results.length; j++) {
					//findById...
					if (_results[j].COLUMN_NAME == 'id') {
						klass['find'] = function(tableName,K,val,cb){
							var e = new EventEmitter();
							sqladapter.find(db,tableName,'id',val,function(err,r){
								var result = [];
								if (r.length) {
									for (var u=0; u < r.length; u++) {
										var o = new K();
										for(var v in r[u]){
											o[v] = r[u][v];
										}
										result.push(o);
									};
								};
								e.emit('success',result[0]);
							});
							return e;
						}.bind(_results[j].COLUMN_NAME,results[this].table_name,klass);
					}else{
						klass['findBy'+CamulCase(_results[j].COLUMN_NAME)] = function(tableName,K,val,cb){
							var self = this,e = new EventEmitter();
							sqladapter.find(db,tableName,this,val,function(err,r){
								var result = [];
								if (r.length) {
									for (var u=0; u < r.length; u++) {
										var o = new K();
										for(var v in r[u]){
											o[v] = r[u][v];
										}
										result.push(o)
									};
								};
								e.emit('success',result);
							});
							return e;
						}.bind(_results[j].COLUMN_NAME,results[this].table_name,klass);
					}
					klass['findAll'] = function(tableName,K){
						var e = new EventEmitter();
						var finder = sqladapter.find(db,tableName,function(err,results){
							e.emit('success',results);
						});
						return e;
					}.bind(_results[j].COLUMN_NAME,results[this].table_name,klass);
					klass['findBy'] = function(tableName,K,conditions,limit){
						var e = new EventEmitter();
						// TODO : prevent sql injection,format all columns' value
						var finder = sqladapter.query(db,tableName,conditions,limit,function(err,results){
							if (!err) {
								e.emit('success',results);
							}
						});
						return e;
					}.bind(_results[j].COLUMN_NAME,results[this].table_name,klass);
					klass.columns.push(_results[j].COLUMN_NAME);
				};
				var klassFunctions = {
					create: function(values){
						var e = new EventEmitter()
						if (this.columns.indexOf('updated_at')+1) {
							var d = new Date();
							values.updated_at = d.getFullYear()+'-'+(d.getMonth()+1)+'-'+d.getDate()+' '+d.getHours() + ':' + d.getMinutes() + ':'+d.getSeconds();
						};
						var validVal = {};
						for(var i in values){
							if (this.columns.indexOf(i)+i) {
								validVal[i] = values[i];
							};
						}
						try{
							var query = sqladapter.create(db,this.tableName,validVal);
							query.on('end',function(result,err){
								// console.log(arguments);
								this.emit('success',result);
							}.bind(e));
						}catch(e){
							e.emit('error',e);
						}
						return e;
					}
				}
				var klassPrototype = {
					update: function(values,conditions,cb){
						var self = this;
						var e = new EventEmitter()
						if (self.constructor.columns.indexOf('updated_at')+1) {
							var d = new Date();
							values.updated_at = d.getFullYear()+'-'+(d.getMonth()+1)+'-'+d.getDate()+' '+d.getHours() + ':' + d.getMinutes() + ':'+d.getSeconds()
						};
						var validVal = {};
						for(var i in values){
							if (self.constructor.columns.indexOf(i)+1) {
								validVal[i] = values[i];
							};
						}
						var query = sqladapter.update(db,this.tableName,validVal,conditions);
						query.on('error',function(result,err){
							e.emit('error',err);
						});
						query.on('end',function(result,err){
							e.emit('success',result);
						});
						return e;
					}
				};
				for(var t in klassFunctions){
					klass[t] = klassFunctions[t];
				}
				for(var t in klassPrototype){
					klass.prototype[t] = klassPrototype[t];
				}
			}.bind(i));
		};
	});
};